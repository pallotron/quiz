#!/usr/bin/python

import sys
import getopt
import re

debug = False

def log(msg):
    if debug == True:
        print msg

def pprint(obj):
    if debug:
        import pprint
        pp = pprint.PrettyPrinter(indent=1)
        pp.pprint(obj)

def load_input(file):

    c = []
    w = []
    
    try:
        f = open(file)
        W = int(f.readline().rstrip())

        for line in f:
            # data structure will be in format of list of listes
            # each element of the list is of this format:
            # (SKU, weight, cost)
            (SKU, weight, cost) = re.split('\s+', line.rstrip())
            c.append(int(cost))
            w.append(int(weight))

        f.close()
    except Exception as e:
        print e
        sys.exit(2)

    return (c, w, W)

def find_gcd(w, W):
    """Find the greatest common denominator among elements of w"""

    from fractions import gcd
    GCD = W
    for i in w:
        GCD = gcd(GCD,i)
   
    return GCD


def solve(c, w, W):
    """
    This looks like the classical unbounded knapsack problem but with
    a different condition. 
    See: http://en.wikipedia.org/wiki/Knapsack_problem 
    """

    N = len(c)
    log("N: " + str(N))

    log("Max weight (W): " + str(W))
    log("c:")
    pprint(c)
    log("w:")
    pprint(w)

    # to speed up the algo it is suggested to divide each element of w
    # by their GCD (Greater Commond Denominator)
    gcd = find_gcd(w, W)
    log("GCD: " + str(gcd))
    # We also divide the W against the GCD
    W /= gcd
    log("W: " + str(W))

    for e in w:
        e /= gcd

    log(w)

    # Implement the unbounded kanpsack algo
    # Here the problem is slightly different from the one in literature
    # Instead of putting elements inside the knapsack we want to take
    # them out

    return None

def main():
    """Main function"""

    # I'm using -d to enable debug
    try:
        opts, args = getopt.getopt(sys.argv[1:], "d")
    except getopt.GetoptError:
        sys.exit(2)
    for o, v in opts:
        if (o == "-d"):
            global debug
            debug = True
   
    file = ""
    W = 0
    try:
        if(args[0]):
            file = args[0]
        (c, w, W) = load_input(file)
        print solve(c, w, W)
    except IndexError:
        print "Provide input file"
        sys.exit(2)

if __name__ == "__main__":
    main()
