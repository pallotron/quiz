#!/usr/bin/python

import sys
import re
import getopt

debug = False

def log(msg):
    if debug == True:
        print msg

def pprint(obj):
    if debug:
        import pprint
        pp = pprint.PrettyPrinter(indent=1)
        pp.pprint(obj)

def build_graph(file):

    graph = {}

    f = open(file)
    n = int(f.readline())
    for _ in xrange(n):
        line = f.readline().rstrip()
        (accuser, strnumaccusasions) = re.split('\s+', line)
        if(not graph.has_key(accuser)):
            graph[accuser]={}
        accused = graph[accuser]
        numaccusations = int(strnumaccusasions)
        for num in xrange(numaccusations):
            accusee = f.readline().rstrip()
            accused[accusee] = True
            if(graph.has_key(accusee)):
                graph[accusee][accuser]=True
            else:
                graph[accusee] = { accuser: True }

    f.close
    return graph

def partitions(graph):

    graphlen = len(graph)

    g1 = set([])
    g2 = set([])
    if(graphlen == 0):
        return [len(g1),len(g2)]

    current_level = []
    next_level = []

    visited = {}
    current_level.append( graph.keys()[0] )
    visited[current_level[0]] = True
    a = True

    while(len(g1) + len(g2) < graphlen):
        next_level = []
        for p in current_level:
            if(a):
                g1.add(p)
            else:
                g2.add(p)
            for k in graph[p]:
                if(not visited.has_key(k)):
                    next_level.append(k)
                visited[k] = True
            visited[p]= True
        current_level = next_level
        a = not a

    log(g1)
    log(g2)

    return [len(g1),len(g2)]

def main():

    try:
        opts, args = getopt.getopt(sys.argv[1:], "d")
    except getopt.GetoptError:
        sys.exit(2)
    for o, v in opts:
        if (o == "-d"):
            global debug
            debug = True

    graph = build_graph(args[0])
    pprint(graph)

    (g1, g2) = partitions(graph)
    if(g1>=g2):
        print "%d %d" % (g1,g2)
    else:
        print "%d %d" % (g2,g1)

if __name__ == "__main__":
    main()
